
Capstone MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a54  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c3c  08002c3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f04  2000000c  08002c50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f10  08002c50  00024f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d058  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000200f  00000000  00000000  0002d0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  0002f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000acd  00000000  00000000  0002fef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251a8  00000000  00000000  000309bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed0b  00000000  00000000  00055b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f41e7  00000000  00000000  00064870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b04  00000000  00000000  00158a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015c55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002c14 	.word	0x08002c14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002c14 	.word	0x08002c14

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fa80 	bl	8000722 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f84f 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f93f 	bl	80004a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 f913 	bl	8000454 <MX_DMA_Init>
  MX_TIM2_Init();
 800022e:	f000 f8c3 	bl	80003b8 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000232:	f000 f887 	bl	8000344 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  //Create test buffer for DAC
  for(i = 0; i < DAC_BUFF_SIZE; i++)
 8000236:	4b1f      	ldr	r3, [pc, #124]	; (80002b4 <main+0x9c>)
 8000238:	2200      	movs	r2, #0
 800023a:	801a      	strh	r2, [r3, #0]
 800023c:	e01c      	b.n	8000278 <main+0x60>
  {
	  if(i > 2045)
 800023e:	4b1d      	ldr	r3, [pc, #116]	; (80002b4 <main+0x9c>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8000246:	4293      	cmp	r3, r2
 8000248:	d907      	bls.n	800025a <main+0x42>
	  {
		  DAC_Buffer[i] = 2045;
 800024a:	4b1a      	ldr	r3, [pc, #104]	; (80002b4 <main+0x9c>)
 800024c:	881b      	ldrh	r3, [r3, #0]
 800024e:	4619      	mov	r1, r3
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <main+0xa0>)
 8000252:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8000256:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	  }
	  DAC_Buffer[i] = i * 2;
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <main+0x9c>)
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	0059      	lsls	r1, r3, #1
 8000260:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <main+0x9c>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	461a      	mov	r2, r3
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <main+0xa0>)
 8000268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i = 0; i < DAC_BUFF_SIZE; i++)
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <main+0x9c>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	b29a      	uxth	r2, r3
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <main+0x9c>)
 8000276:	801a      	strh	r2, [r3, #0]
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <main+0x9c>)
 800027a:	881b      	ldrh	r3, [r3, #0]
 800027c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000280:	4293      	cmp	r3, r2
 8000282:	d9dc      	bls.n	800023e <main+0x26>
  }
  //Start timer 2
  if(HAL_OK != HAL_TIM_Base_Start_IT(&htim2))
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <main+0xa4>)
 8000286:	f002 f925 	bl	80024d4 <HAL_TIM_Base_Start_IT>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <main+0x7c>
	  Error_Handler();
 8000290:	f000 f922 	bl	80004d8 <Error_Handler>
  //Start DAC
  if(HAL_OK != HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_Buffer, DAC_BUFF_SIZE, DAC_ALIGN_12B_R))
 8000294:	2300      	movs	r3, #0
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	f241 3388 	movw	r3, #5000	; 0x1388
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <main+0xa0>)
 800029e:	2100      	movs	r1, #0
 80002a0:	4807      	ldr	r0, [pc, #28]	; (80002c0 <main+0xa8>)
 80002a2:	f000 fbe1 	bl	8000a68 <HAL_DAC_Start_DMA>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <main+0x98>
	  Error_Handler();
 80002ac:	f000 f914 	bl	80004d8 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <main+0x98>
 80002b2:	bf00      	nop
 80002b4:	20004f08 	.word	0x20004f08
 80002b8:	200000e8 	.word	0x200000e8
 80002bc:	2000009c 	.word	0x2000009c
 80002c0:	20000028 	.word	0x20000028

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b094      	sub	sp, #80	; 0x50
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	2238      	movs	r2, #56	; 0x38
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fc72 	bl	8002bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ea:	f001 fae5 	bl	80018b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f8:	2340      	movs	r3, #64	; 0x40
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f001 fb8b 	bl	8001a20 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000310:	f000 f8e2 	bl	80004d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000318:	2301      	movs	r3, #1
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f001 fe89 	bl	8002044 <HAL_RCC_ClockConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000338:	f000 f8ce 	bl	80004d8 <Error_Handler>
  }
}
 800033c:	bf00      	nop
 800033e:	3750      	adds	r7, #80	; 0x50
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08c      	sub	sp, #48	; 0x30
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800034a:	463b      	mov	r3, r7
 800034c:	2230      	movs	r2, #48	; 0x30
 800034e:	2100      	movs	r1, #0
 8000350:	4618      	mov	r0, r3
 8000352:	f002 fc33 	bl	8002bbc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <MX_DAC1_Init+0x6c>)
 8000358:	4a16      	ldr	r2, [pc, #88]	; (80003b4 <MX_DAC1_Init+0x70>)
 800035a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800035c:	4814      	ldr	r0, [pc, #80]	; (80003b0 <MX_DAC1_Init+0x6c>)
 800035e:	f000 fb60 	bl	8000a22 <HAL_DAC_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000368:	f000 f8b6 	bl	80004d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800036c:	2302      	movs	r3, #2
 800036e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000370:	2300      	movs	r3, #0
 8000372:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800037c:	2312      	movs	r3, #18
 800037e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000388:	2301      	movs	r3, #1
 800038a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	4619      	mov	r1, r3
 8000396:	4806      	ldr	r0, [pc, #24]	; (80003b0 <MX_DAC1_Init+0x6c>)
 8000398:	f000 fc58 	bl	8000c4c <HAL_DAC_ConfigChannel>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80003a2:	f000 f899 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	3730      	adds	r7, #48	; 0x30
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000028 	.word	0x20000028
 80003b4:	50000800 	.word	0x50000800

080003b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d6:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <MX_TIM2_Init+0x98>)
 80003d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80003de:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <MX_TIM2_Init+0x98>)
 80003e0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80003e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <MX_TIM2_Init+0x98>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22;
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_TIM2_Init+0x98>)
 80003ee:	2216      	movs	r2, #22
 80003f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <MX_TIM2_Init+0x98>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_TIM2_Init+0x98>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003fe:	4814      	ldr	r0, [pc, #80]	; (8000450 <MX_TIM2_Init+0x98>)
 8000400:	f002 f810 	bl	8002424 <HAL_TIM_Base_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800040a:	f000 f865 	bl	80004d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000412:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	480d      	ldr	r0, [pc, #52]	; (8000450 <MX_TIM2_Init+0x98>)
 800041c:	f002 f8d2 	bl	80025c4 <HAL_TIM_ConfigClockSource>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000426:	f000 f857 	bl	80004d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800042a:	2320      	movs	r3, #32
 800042c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	4806      	ldr	r0, [pc, #24]	; (8000450 <MX_TIM2_Init+0x98>)
 8000438:	f002 fb2a 	bl	8002a90 <HAL_TIMEx_MasterConfigSynchronization>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000442:	f000 f849 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	3720      	adds	r7, #32
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2000009c 	.word	0x2000009c

08000454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <MX_DMA_Init+0x50>)
 800045c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800045e:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <MX_DMA_Init+0x50>)
 8000460:	f043 0304 	orr.w	r3, r3, #4
 8000464:	6493      	str	r3, [r2, #72]	; 0x48
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_DMA_Init+0x50>)
 8000468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_DMA_Init+0x50>)
 8000474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <MX_DMA_Init+0x50>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6493      	str	r3, [r2, #72]	; 0x48
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_DMA_Init+0x50>)
 8000480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200b      	movs	r0, #11
 8000490:	f000 fa93 	bl	80009ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000494:	200b      	movs	r0, #11
 8000496:	f000 faaa 	bl	80009ee <HAL_NVIC_EnableIRQ>

}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_GPIO_Init+0x2c>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <MX_GPIO_Init+0x2c>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_GPIO_Init+0x2c>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <Error_Handler+0x8>
	...

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x44>)
 80004ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x44>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6613      	str	r3, [r2, #96]	; 0x60
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x44>)
 80004f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_MspInit+0x44>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_MspInit+0x44>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	6593      	str	r3, [r2, #88]	; 0x58
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_MspInit+0x44>)
 8000510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800051a:	f001 fa71 	bl	8001a00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a2b      	ldr	r2, [pc, #172]	; (80005f8 <HAL_DAC_MspInit+0xcc>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d14f      	bne.n	80005ee <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <HAL_DAC_MspInit+0xd0>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a2a      	ldr	r2, [pc, #168]	; (80005fc <HAL_DAC_MspInit+0xd0>)
 8000554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <HAL_DAC_MspInit+0xd0>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <HAL_DAC_MspInit+0xd0>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a24      	ldr	r2, [pc, #144]	; (80005fc <HAL_DAC_MspInit+0xd0>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <HAL_DAC_MspInit+0xd0>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800057e:	2310      	movs	r3, #16
 8000580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000582:	2303      	movs	r3, #3
 8000584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4619      	mov	r1, r3
 8000590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000594:	f001 f80e 	bl	80015b4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 800059a:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <HAL_DAC_MspInit+0xd8>)
 800059c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005a0:	2206      	movs	r2, #6
 80005a2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005a6:	2210      	movs	r2, #16
 80005a8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005bc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005c8:	2220      	movs	r2, #32
 80005ca:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005d4:	f000 fd7c 	bl	80010d0 <HAL_DMA_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80005de:	f7ff ff7b 	bl	80004d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <HAL_DAC_MspInit+0xd4>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	; 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	50000800 	.word	0x50000800
 80005fc:	40021000 	.word	0x40021000
 8000600:	2000003c 	.word	0x2000003c
 8000604:	40020008 	.word	0x40020008

08000608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000618:	d10b      	bne.n	8000632 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_TIM_Base_MspInit+0x38>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_TIM_Base_MspInit+0x38>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6593      	str	r3, [r2, #88]	; 0x58
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_TIM_Base_MspInit+0x38>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000690:	f000 f89a 	bl	80007c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <DMA1_Channel1_IRQHandler+0x10>)
 800069e:	f000 fe3a 	bl	8001316 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000003c 	.word	0x2000003c

080006ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemInit+0x20>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <SystemInit+0x20>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d4:	f7ff ffea 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fe:	f002 fa65 	bl	8002bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000702:	f7ff fd89 	bl	8000218 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000714:	08002c44 	.word	0x08002c44
  ldr r2, =_sbss
 8000718:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800071c:	20004f10 	.word	0x20004f10

08000720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_2_IRQHandler>

08000722 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000728:	2300      	movs	r3, #0
 800072a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f939 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000732:	200f      	movs	r0, #15
 8000734:	f000 f80e 	bl	8000754 <HAL_InitTick>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	71fb      	strb	r3, [r7, #7]
 8000742:	e001      	b.n	8000748 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000744:	f7ff fece 	bl	80004e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000748:	79fb      	ldrb	r3, [r7, #7]

}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <HAL_InitTick+0x68>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d022      	beq.n	80007ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_InitTick+0x6c>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_InitTick+0x68>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000774:	fbb1 f3f3 	udiv	r3, r1, r3
 8000778:	fbb2 f3f3 	udiv	r3, r2, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f944 	bl	8000a0a <HAL_SYSTICK_Config>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10f      	bne.n	80007a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b0f      	cmp	r3, #15
 800078c:	d809      	bhi.n	80007a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078e:	2200      	movs	r2, #0
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	f04f 30ff 	mov.w	r0, #4294967295
 8000796:	f000 f910 	bl	80009ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <HAL_InitTick+0x70>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	e007      	b.n	80007b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e004      	b.n	80007b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e001      	b.n	80007b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000004 	.word	0x20000004

080007c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x1c>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x20>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4413      	add	r3, r2
 80007d6:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <HAL_IncTick+0x1c>)
 80007d8:	6013      	str	r3, [r2, #0]
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	20004f0c 	.word	0x20004f0c
 80007e8:	20000008 	.word	0x20000008

080007ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return uwTick;
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <HAL_GetTick+0x14>)
 80007f2:	681b      	ldr	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20004f0c 	.word	0x20004f0c

08000804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000820:	4013      	ands	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800082c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	60d3      	str	r3, [r2, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <__NVIC_GetPriorityGrouping+0x18>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	f003 0307 	and.w	r3, r3, #7
}
 800085a:	4618      	mov	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	2b00      	cmp	r3, #0
 8000878:	db0b      	blt.n	8000892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f003 021f 	and.w	r2, r3, #31
 8000880:	4907      	ldr	r1, [pc, #28]	; (80008a0 <__NVIC_EnableIRQ+0x38>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	2001      	movs	r0, #1
 800088a:	fa00 f202 	lsl.w	r2, r0, r2
 800088e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db0a      	blt.n	80008ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <__NVIC_SetPriority+0x4c>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008cc:	e00a      	b.n	80008e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4908      	ldr	r1, [pc, #32]	; (80008f4 <__NVIC_SetPriority+0x50>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	3b04      	subs	r3, #4
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	761a      	strb	r2, [r3, #24]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f1c3 0307 	rsb	r3, r3, #7
 8000912:	2b04      	cmp	r3, #4
 8000914:	bf28      	it	cs
 8000916:	2304      	movcs	r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3304      	adds	r3, #4
 800091e:	2b06      	cmp	r3, #6
 8000920:	d902      	bls.n	8000928 <NVIC_EncodePriority+0x30>
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3b03      	subs	r3, #3
 8000926:	e000      	b.n	800092a <NVIC_EncodePriority+0x32>
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43da      	mvns	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	401a      	ands	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000940:	f04f 31ff 	mov.w	r1, #4294967295
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43d9      	mvns	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	4313      	orrs	r3, r2
         );
}
 8000952:	4618      	mov	r0, r3
 8000954:	3724      	adds	r7, #36	; 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000970:	d301      	bcc.n	8000976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <SysTick_Config+0x40>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097e:	210f      	movs	r1, #15
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f7ff ff8e 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SysTick_Config+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x40>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff29 	bl	8000804 <__NVIC_SetPriorityGrouping>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009c8:	f7ff ff40 	bl	800084c <__NVIC_GetPriorityGrouping>
 80009cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff ff90 	bl	80008f8 <NVIC_EncodePriority>
 80009d8:	4602      	mov	r2, r0
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff5f 	bl	80008a4 <__NVIC_SetPriority>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff33 	bl	8000868 <__NVIC_EnableIRQ>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffa4 	bl	8000960 <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e014      	b.n	8000a5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	791b      	ldrb	r3, [r3, #4]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d105      	bne.n	8000a4a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fd71 	bl	800052c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e0b2      	b.n	8000be6 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	795b      	ldrb	r3, [r3, #5]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d101      	bne.n	8000a8c <HAL_DAC_Start_DMA+0x24>
 8000a88:	2302      	movs	r3, #2
 8000a8a:	e0ac      	b.n	8000be6 <HAL_DAC_Start_DMA+0x17e>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2202      	movs	r2, #2
 8000a96:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d129      	bne.n	8000af2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	4a53      	ldr	r2, [pc, #332]	; (8000bf0 <HAL_DAC_Start_DMA+0x188>)
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	4a52      	ldr	r2, [pc, #328]	; (8000bf4 <HAL_DAC_Start_DMA+0x18c>)
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <HAL_DAC_Start_DMA+0x190>)
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ac4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_DAC_Start_DMA+0x6c>
 8000acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d005      	beq.n	8000ade <HAL_DAC_Start_DMA+0x76>
 8000ad2:	e009      	b.n	8000ae8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3308      	adds	r3, #8
 8000ada:	61bb      	str	r3, [r7, #24]
        break;
 8000adc:	e033      	b.n	8000b46 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	330c      	adds	r3, #12
 8000ae4:	61bb      	str	r3, [r7, #24]
        break;
 8000ae6:	e02e      	b.n	8000b46 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3310      	adds	r3, #16
 8000aee:	61bb      	str	r3, [r7, #24]
        break;
 8000af0:	e029      	b.n	8000b46 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	4a41      	ldr	r2, [pc, #260]	; (8000bfc <HAL_DAC_Start_DMA+0x194>)
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	4a40      	ldr	r2, [pc, #256]	; (8000c00 <HAL_DAC_Start_DMA+0x198>)
 8000b00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	4a3f      	ldr	r2, [pc, #252]	; (8000c04 <HAL_DAC_Start_DMA+0x19c>)
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b18:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_DAC_Start_DMA+0xc0>
 8000b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d005      	beq.n	8000b32 <HAL_DAC_Start_DMA+0xca>
 8000b26:	e009      	b.n	8000b3c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3314      	adds	r3, #20
 8000b2e:	61bb      	str	r3, [r7, #24]
        break;
 8000b30:	e009      	b.n	8000b46 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3318      	adds	r3, #24
 8000b38:	61bb      	str	r3, [r7, #24]
        break;
 8000b3a:	e004      	b.n	8000b46 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	331c      	adds	r3, #28
 8000b42:	61bb      	str	r3, [r7, #24]
        break;
 8000b44:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d111      	bne.n	8000b70 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6898      	ldr	r0, [r3, #8]
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	69ba      	ldr	r2, [r7, #24]
 8000b66:	f000 fb5b 	bl	8001220 <HAL_DMA_Start_IT>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	77fb      	strb	r3, [r7, #31]
 8000b6e:	e010      	b.n	8000b92 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000b7e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	68d8      	ldr	r0, [r3, #12]
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	f000 fb49 	bl	8001220 <HAL_DMA_Start_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2200      	movs	r2, #0
 8000b96:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000b98:	7ffb      	ldrb	r3, [r7, #31]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d11c      	bne.n	8000bd8 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6819      	ldr	r1, [r3, #0]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	2201      	movs	r2, #1
 8000bac:	409a      	lsls	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_DAC_Start_DMA+0x1a0>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	099b      	lsrs	r3, r3, #6
 8000bbc:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <HAL_DAC_Start_DMA+0x1a4>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	099b      	lsrs	r3, r3, #6
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8000bc8:	e002      	b.n	8000bd0 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f9      	bne.n	8000bca <HAL_DAC_Start_DMA+0x162>
 8000bd6:	e005      	b.n	8000be4 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	f043 0204 	orr.w	r2, r3, #4
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3720      	adds	r7, #32
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	08000fbd 	.word	0x08000fbd
 8000bf4:	08000fdf 	.word	0x08000fdf
 8000bf8:	08000ffb 	.word	0x08000ffb
 8000bfc:	08001065 	.word	0x08001065
 8000c00:	08001087 	.word	0x08001087
 8000c04:	080010a3 	.word	0x080010a3
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	053e2d63 	.word	0x053e2d63

08000c10 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <HAL_DAC_ConfigChannel+0x1c>
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e19e      	b.n	8000faa <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	795b      	ldrb	r3, [r3, #5]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <HAL_DAC_ConfigChannel+0x2c>
 8000c74:	2302      	movs	r3, #2
 8000c76:	e198      	b.n	8000faa <HAL_DAC_ConfigChannel+0x35e>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2202      	movs	r2, #2
 8000c82:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d17a      	bne.n	8000d82 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000c8c:	f7ff fdae 	bl	80007ec <HAL_GetTick>
 8000c90:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d13d      	bne.n	8000d14 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000c98:	e018      	b.n	8000ccc <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c9a:	f7ff fda7 	bl	80007ec <HAL_GetTick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d911      	bls.n	8000ccc <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00a      	beq.n	8000ccc <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	f043 0208 	orr.w	r2, r3, #8
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e16e      	b.n	8000faa <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1df      	bne.n	8000c9a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ce4:	e020      	b.n	8000d28 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000ce6:	f7ff fd81 	bl	80007ec <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d90f      	bls.n	8000d14 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	da0a      	bge.n	8000d14 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	f043 0208 	orr.w	r2, r3, #8
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e14a      	b.n	8000faa <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	dbe3      	blt.n	8000ce6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d26:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	ea02 0103 	and.w	r1, r2, r3
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	21ff      	movs	r1, #255	; 0xff
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	ea02 0103 	and.w	r1, r2, r3
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d11d      	bne.n	8000dc6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f003 0310 	and.w	r3, r3, #16
 8000d98:	221f      	movs	r2, #31
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da2:	4013      	ands	r3, r2
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dde:	4013      	ands	r3, r2
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d102      	bne.n	8000df0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
 8000dee:	e00f      	b.n	8000e10 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d102      	bne.n	8000dfe <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	e008      	b.n	8000e10 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000e06:	2301      	movs	r3, #1
 8000e08:	623b      	str	r3, [r7, #32]
 8000e0a:	e001      	b.n	8000e10 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	6a3a      	ldr	r2, [r7, #32]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e32:	4013      	ands	r3, r2
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	791b      	ldrb	r3, [r3, #4]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d102      	bne.n	8000e44 <HAL_DAC_ConfigChannel+0x1f8>
 8000e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e42:	e000      	b.n	8000e46 <HAL_DAC_ConfigChannel+0x1fa>
 8000e44:	2300      	movs	r3, #0
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e5e:	4013      	ands	r3, r2
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	795b      	ldrb	r3, [r3, #5]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d102      	bne.n	8000e70 <HAL_DAC_ConfigChannel+0x224>
 8000e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6e:	e000      	b.n	8000e72 <HAL_DAC_ConfigChannel+0x226>
 8000e70:	2300      	movs	r3, #0
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d114      	bne.n	8000eb2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8000e88:	f001 fa7a 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 8000e8c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	4a48      	ldr	r2, [pc, #288]	; (8000fb4 <HAL_DAC_ConfigChannel+0x368>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d904      	bls.n	8000ea0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9e:	e00f      	b.n	8000ec0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4a45      	ldr	r2, [pc, #276]	; (8000fb8 <HAL_DAC_ConfigChannel+0x36c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d90a      	bls.n	8000ebe <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb0:	e006      	b.n	8000ec0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebc:	e000      	b.n	8000ec0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000ebe:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6819      	ldr	r1, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f12:	4013      	ands	r3, r2
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f34:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6819      	ldr	r1, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	22c0      	movs	r2, #192	; 0xc0
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43da      	mvns	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	400a      	ands	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f003 0310 	and.w	r3, r3, #16
 8000f7c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	ea02 0103 	and.w	r1, r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	409a      	lsls	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8000fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3728      	adds	r7, #40	; 0x28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	09896800 	.word	0x09896800
 8000fb8:	04c4b400 	.word	0x04c4b400

08000fbc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff fe20 	bl	8000c10 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	711a      	strb	r2, [r3, #4]
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f7ff fe19 	bl	8000c24 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	f043 0204 	orr.w	r2, r3, #4
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff fe0f 	bl	8000c38 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2201      	movs	r2, #1
 800101e:	711a      	strb	r2, [r3, #4]
}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001070:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f7ff ffd8 	bl	8001028 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2201      	movs	r2, #1
 800107c:	711a      	strb	r2, [r3, #4]
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff ffd1 	bl	800103c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	f043 0204 	orr.w	r2, r3, #4
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff ffc7 	bl	8001050 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2201      	movs	r2, #1
 80010c6:	711a      	strb	r2, [r3, #4]
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e08d      	b.n	80011fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b47      	ldr	r3, [pc, #284]	; (8001208 <HAL_DMA_Init+0x138>)
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d80f      	bhi.n	800110e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <HAL_DMA_Init+0x13c>)
 80010f6:	4413      	add	r3, r2
 80010f8:	4a45      	ldr	r2, [pc, #276]	; (8001210 <HAL_DMA_Init+0x140>)
 80010fa:	fba2 2303 	umull	r2, r3, r2, r3
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	009a      	lsls	r2, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a42      	ldr	r2, [pc, #264]	; (8001214 <HAL_DMA_Init+0x144>)
 800110a:	641a      	str	r2, [r3, #64]	; 0x40
 800110c:	e00e      	b.n	800112c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b40      	ldr	r3, [pc, #256]	; (8001218 <HAL_DMA_Init+0x148>)
 8001116:	4413      	add	r3, r2
 8001118:	4a3d      	ldr	r2, [pc, #244]	; (8001210 <HAL_DMA_Init+0x140>)
 800111a:	fba2 2303 	umull	r2, r3, r2, r3
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	009a      	lsls	r2, r3, #2
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a3c      	ldr	r2, [pc, #240]	; (800121c <HAL_DMA_Init+0x14c>)
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001146:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f9b6 	bl	80014f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800118c:	d102      	bne.n	8001194 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d010      	beq.n	80011d4 <HAL_DMA_Init+0x104>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d80c      	bhi.n	80011d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f9d6 	bl	800156c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	e008      	b.n	80011e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020407 	.word	0x40020407
 800120c:	bffdfff8 	.word	0xbffdfff8
 8001210:	cccccccd 	.word	0xcccccccd
 8001214:	40020000 	.word	0x40020000
 8001218:	bffdfbf8 	.word	0xbffdfbf8
 800121c:	40020400 	.word	0x40020400

08001220 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_DMA_Start_IT+0x20>
 800123c:	2302      	movs	r3, #2
 800123e:	e066      	b.n	800130e <HAL_DMA_Start_IT+0xee>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d155      	bne.n	8001300 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0201 	bic.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f8fb 	bl	8001474 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 020e 	orr.w	r2, r2, #14
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00f      	b.n	80012b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0204 	bic.w	r2, r2, #4
 80012a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 020a 	orr.w	r2, r2, #10
 80012b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0201 	orr.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e005      	b.n	800130c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001308:	2302      	movs	r3, #2
 800130a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800130c:	7dfb      	ldrb	r3, [r7, #23]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	2204      	movs	r2, #4
 8001338:	409a      	lsls	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d026      	beq.n	8001390 <HAL_DMA_IRQHandler+0x7a>
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d021      	beq.n	8001390 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0320 	and.w	r3, r3, #32
 8001356:	2b00      	cmp	r3, #0
 8001358:	d107      	bne.n	800136a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0204 	bic.w	r2, r2, #4
 8001368:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f003 021f 	and.w	r2, r3, #31
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	2104      	movs	r1, #4
 8001378:	fa01 f202 	lsl.w	r2, r1, r2
 800137c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	2b00      	cmp	r3, #0
 8001384:	d071      	beq.n	800146a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800138e:	e06c      	b.n	800146a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f003 031f 	and.w	r3, r3, #31
 8001398:	2202      	movs	r2, #2
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d02e      	beq.n	8001402 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d029      	beq.n	8001402 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0320 	and.w	r3, r3, #32
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10b      	bne.n	80013d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 020a 	bic.w	r2, r2, #10
 80013ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	2102      	movs	r1, #2
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d038      	beq.n	800146a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001400:	e033      	b.n	800146a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	2208      	movs	r2, #8
 800140c:	409a      	lsls	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d02a      	beq.n	800146c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d025      	beq.n	800146c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 020e 	bic.w	r2, r2, #14
 800142e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f003 021f 	and.w	r2, r3, #31
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145e:	2b00      	cmp	r3, #0
 8001460:	d004      	beq.n	800146c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800146a:	bf00      	nop
 800146c:	bf00      	nop
}
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800148a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800149c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f003 021f 	and.w	r2, r3, #31
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b10      	cmp	r3, #16
 80014c0:	d108      	bne.n	80014d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014d2:	e007      	b.n	80014e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	60da      	str	r2, [r3, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001500:	429a      	cmp	r2, r3
 8001502:	d802      	bhi.n	800150a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e001      	b.n	800150e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800150c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	3b08      	subs	r3, #8
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	009a      	lsls	r2, r3, #2
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4413      	add	r3, r2
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800153a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	2201      	movs	r2, #1
 8001544:	409a      	lsls	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	651a      	str	r2, [r3, #80]	; 0x50
}
 800154a:	bf00      	nop
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40020407 	.word	0x40020407
 800155c:	40020800 	.word	0x40020800
 8001560:	40020820 	.word	0x40020820
 8001564:	cccccccd 	.word	0xcccccccd
 8001568:	40020880 	.word	0x40020880

0800156c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001580:	4413      	add	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800158e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3b01      	subs	r3, #1
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	2201      	movs	r2, #1
 800159a:	409a      	lsls	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	1000823f 	.word	0x1000823f
 80015b0:	40020940 	.word	0x40020940

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015c2:	e15a      	b.n	800187a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2101      	movs	r1, #1
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 814c 	beq.w	8001874 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d005      	beq.n	80015f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d130      	bne.n	8001656 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800162a:	2201      	movs	r2, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f003 0201 	and.w	r2, r3, #1
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b03      	cmp	r3, #3
 8001660:	d017      	beq.n	8001692 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d123      	bne.n	80016e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3208      	adds	r2, #8
 80016a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	08da      	lsrs	r2, r3, #3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3208      	adds	r2, #8
 80016e0:	6939      	ldr	r1, [r7, #16]
 80016e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0203 	and.w	r2, r3, #3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80a6 	beq.w	8001874 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001728:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <HAL_GPIO_Init+0x2e4>)
 800172a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172c:	4a5a      	ldr	r2, [pc, #360]	; (8001898 <HAL_GPIO_Init+0x2e4>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6613      	str	r3, [r2, #96]	; 0x60
 8001734:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_GPIO_Init+0x2e4>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001740:	4a56      	ldr	r2, [pc, #344]	; (800189c <HAL_GPIO_Init+0x2e8>)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	220f      	movs	r2, #15
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800176a:	d01f      	beq.n	80017ac <HAL_GPIO_Init+0x1f8>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a4c      	ldr	r2, [pc, #304]	; (80018a0 <HAL_GPIO_Init+0x2ec>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d019      	beq.n	80017a8 <HAL_GPIO_Init+0x1f4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d013      	beq.n	80017a4 <HAL_GPIO_Init+0x1f0>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <HAL_GPIO_Init+0x2f4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d00d      	beq.n	80017a0 <HAL_GPIO_Init+0x1ec>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a49      	ldr	r2, [pc, #292]	; (80018ac <HAL_GPIO_Init+0x2f8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d007      	beq.n	800179c <HAL_GPIO_Init+0x1e8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a48      	ldr	r2, [pc, #288]	; (80018b0 <HAL_GPIO_Init+0x2fc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d101      	bne.n	8001798 <HAL_GPIO_Init+0x1e4>
 8001794:	2305      	movs	r3, #5
 8001796:	e00a      	b.n	80017ae <HAL_GPIO_Init+0x1fa>
 8001798:	2306      	movs	r3, #6
 800179a:	e008      	b.n	80017ae <HAL_GPIO_Init+0x1fa>
 800179c:	2304      	movs	r3, #4
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x1fa>
 80017a0:	2303      	movs	r3, #3
 80017a2:	e004      	b.n	80017ae <HAL_GPIO_Init+0x1fa>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_GPIO_Init+0x1fa>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_GPIO_Init+0x1fa>
 80017ac:	2300      	movs	r3, #0
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	f002 0203 	and.w	r2, r2, #3
 80017b4:	0092      	lsls	r2, r2, #2
 80017b6:	4093      	lsls	r3, r2
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017be:	4937      	ldr	r1, [pc, #220]	; (800189c <HAL_GPIO_Init+0x2e8>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_GPIO_Init+0x300>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017f0:	4a30      	ldr	r2, [pc, #192]	; (80018b4 <HAL_GPIO_Init+0x300>)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017f6:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <HAL_GPIO_Init+0x300>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800181a:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <HAL_GPIO_Init+0x300>)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <HAL_GPIO_Init+0x300>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <HAL_GPIO_Init+0x300>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_GPIO_Init+0x300>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800186e:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <HAL_GPIO_Init+0x300>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	3301      	adds	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa22 f303 	lsr.w	r3, r2, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	f47f ae9d 	bne.w	80015c4 <HAL_GPIO_Init+0x10>
  }
}
 800188a:	bf00      	nop
 800188c:	bf00      	nop
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000
 80018a0:	48000400 	.word	0x48000400
 80018a4:	48000800 	.word	0x48000800
 80018a8:	48000c00 	.word	0x48000c00
 80018ac:	48001000 	.word	0x48001000
 80018b0:	48001400 	.word	0x48001400
 80018b4:	40010400 	.word	0x40010400

080018b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d141      	bne.n	800194a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018c6:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d2:	d131      	bne.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018d4:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018da:	4a46      	ldr	r2, [pc, #280]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ec:	4a41      	ldr	r2, [pc, #260]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018f4:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2232      	movs	r2, #50	; 0x32
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	4a3f      	ldr	r2, [pc, #252]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	0c9b      	lsrs	r3, r3, #18
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800190a:	e002      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3b01      	subs	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191e:	d102      	bne.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f2      	bne.n	800190c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001932:	d158      	bne.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e057      	b.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001938:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800193e:	4a2d      	ldr	r2, [pc, #180]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001948:	e04d      	b.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001950:	d141      	bne.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800195a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195e:	d131      	bne.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001966:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001978:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2232      	movs	r2, #50	; 0x32
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	4a1c      	ldr	r2, [pc, #112]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	0c9b      	lsrs	r3, r3, #18
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001996:	e002      	b.n	800199e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3b01      	subs	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019aa:	d102      	bne.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f2      	bne.n	8001998 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019be:	d112      	bne.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e011      	b.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019d4:	e007      	b.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40007000 	.word	0x40007000
 80019f8:	20000000 	.word	0x20000000
 80019fc:	431bde83 	.word	0x431bde83

08001a00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0e:	6093      	str	r3, [r2, #8]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40007000 	.word	0x40007000

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e2fe      	b.n	8002030 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d075      	beq.n	8001b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a3e:	4b97      	ldr	r3, [pc, #604]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a48:	4b94      	ldr	r3, [pc, #592]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	d102      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3e>
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_OscConfig+0x44>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d10b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	4b8d      	ldr	r3, [pc, #564]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d05b      	beq.n	8001b28 <HAL_RCC_OscConfig+0x108>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d157      	bne.n	8001b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e2d9      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x74>
 8001a86:	4b85      	ldr	r3, [pc, #532]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a84      	ldr	r2, [pc, #528]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xb0>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7e      	ldr	r2, [pc, #504]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7b      	ldr	r2, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xb0>
 8001ab8:	4b78      	ldr	r3, [pc, #480]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a77      	ldr	r2, [pc, #476]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b75      	ldr	r3, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a74      	ldr	r2, [pc, #464]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7fe fe88 	bl	80007ec <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7fe fe84 	bl	80007ec <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e29e      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af2:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xc0>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7fe fe74 	bl	80007ec <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7fe fe70 	bl	80007ec <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e28a      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b1a:	4b60      	ldr	r3, [pc, #384]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0xe8>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d075      	beq.n	8001c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b36:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_OscConfig+0x136>
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d002      	beq.n	8001b5c <HAL_RCC_OscConfig+0x13c>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d11f      	bne.n	8001b9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5c:	4b4f      	ldr	r3, [pc, #316]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_OscConfig+0x154>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e25d      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	4946      	ldr	r1, [pc, #280]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b88:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <HAL_RCC_OscConfig+0x280>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fde1 	bl	8000754 <HAL_InitTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d043      	beq.n	8001c20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e249      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d023      	beq.n	8001bec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba4:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a3c      	ldr	r2, [pc, #240]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fe1c 	bl	80007ec <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7fe fe18 	bl	80007ec <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e232      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	061b      	lsls	r3, r3, #24
 8001be4:	492d      	ldr	r1, [pc, #180]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
 8001bea:	e01a      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fdf8 	bl	80007ec <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c00:	f7fe fdf4 	bl	80007ec <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e20e      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x1e0>
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d041      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3c:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7fe fdd1 	bl	80007ec <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7fe fdcd 	bl	80007ec <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1e7      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0ef      	beq.n	8001c4e <HAL_RCC_OscConfig+0x22e>
 8001c6e:	e020      	b.n	8001cb2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7fe fdb4 	bl	80007ec <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c86:	e00d      	b.n	8001ca4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7fe fdb0 	bl	80007ec <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d906      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e1ca      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1ea      	bne.n	8001c88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80a6 	beq.w	8001e0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cc4:	4b84      	ldr	r3, [pc, #528]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2b4>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x2b6>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b7f      	ldr	r3, [pc, #508]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a7e      	ldr	r2, [pc, #504]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce6:	4b7c      	ldr	r3, [pc, #496]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf6:	4b79      	ldr	r3, [pc, #484]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d118      	bne.n	8001d34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d02:	4b76      	ldr	r3, [pc, #472]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a75      	ldr	r2, [pc, #468]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0e:	f7fe fd6d 	bl	80007ec <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d16:	f7fe fd69 	bl	80007ec <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e183      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d28:	4b6c      	ldr	r3, [pc, #432]	; (8001edc <HAL_RCC_OscConfig+0x4bc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d108      	bne.n	8001d4e <HAL_RCC_OscConfig+0x32e>
 8001d3c:	4b66      	ldr	r3, [pc, #408]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d4c:	e024      	b.n	8001d98 <HAL_RCC_OscConfig+0x378>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b05      	cmp	r3, #5
 8001d54:	d110      	bne.n	8001d78 <HAL_RCC_OscConfig+0x358>
 8001d56:	4b60      	ldr	r3, [pc, #384]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5c:	4a5e      	ldr	r2, [pc, #376]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d66:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	4a5a      	ldr	r2, [pc, #360]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d76:	e00f      	b.n	8001d98 <HAL_RCC_OscConfig+0x378>
 8001d78:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d88:	4b53      	ldr	r3, [pc, #332]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8e:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d016      	beq.n	8001dce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da0:	f7fe fd24 	bl	80007ec <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da8:	f7fe fd20 	bl	80007ec <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e138      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dbe:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0ed      	beq.n	8001da8 <HAL_RCC_OscConfig+0x388>
 8001dcc:	e015      	b.n	8001dfa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7fe fd0d 	bl	80007ec <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7fe fd09 	bl	80007ec <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e121      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dec:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1ed      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dfa:	7ffb      	ldrb	r3, [r7, #31]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d105      	bne.n	8001e0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e00:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	4a34      	ldr	r2, [pc, #208]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d03c      	beq.n	8001e92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01c      	beq.n	8001e5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e26:	4a2c      	ldr	r2, [pc, #176]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e30:	f7fe fcdc 	bl	80007ec <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e38:	f7fe fcd8 	bl	80007ec <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0f2      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ef      	beq.n	8001e38 <HAL_RCC_OscConfig+0x418>
 8001e58:	e01b      	b.n	8001e92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e60:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fcbf 	bl	80007ec <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e72:	f7fe fcbb 	bl	80007ec <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0d5      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ef      	bne.n	8001e72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80c9 	beq.w	800202e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	f000 8083 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d15e      	bne.n	8001f70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7fe fc95 	bl	80007ec <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec4:	e00c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7fe fc91 	bl	80007ec <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d905      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0ab      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	4b55      	ldr	r3, [pc, #340]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ec      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eec:	4b52      	ldr	r3, [pc, #328]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4b52      	ldr	r3, [pc, #328]	; (800203c <HAL_RCC_OscConfig+0x61c>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6a11      	ldr	r1, [r2, #32]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001efc:	3a01      	subs	r2, #1
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	4311      	orrs	r1, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f06:	0212      	lsls	r2, r2, #8
 8001f08:	4311      	orrs	r1, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f0e:	0852      	lsrs	r2, r2, #1
 8001f10:	3a01      	subs	r2, #1
 8001f12:	0552      	lsls	r2, r2, #21
 8001f14:	4311      	orrs	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f1a:	0852      	lsrs	r2, r2, #1
 8001f1c:	3a01      	subs	r2, #1
 8001f1e:	0652      	lsls	r2, r2, #25
 8001f20:	4311      	orrs	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f26:	06d2      	lsls	r2, r2, #27
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	4943      	ldr	r1, [pc, #268]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a40      	ldr	r2, [pc, #256]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f3c:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a3d      	ldr	r2, [pc, #244]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fc50 	bl	80007ec <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe fc4c 	bl	80007ec <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e066      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	4b35      	ldr	r3, [pc, #212]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x530>
 8001f6e:	e05e      	b.n	800202e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a30      	ldr	r2, [pc, #192]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fc36 	bl	80007ec <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7fe fc32 	bl	80007ec <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e04c      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fa2:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	4924      	ldr	r1, [pc, #144]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001fa8:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_RCC_OscConfig+0x620>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	60cb      	str	r3, [r1, #12]
 8001fae:	e03e      	b.n	800202e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e039      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_OscConfig+0x618>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d12c      	bne.n	800202a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d123      	bne.n	800202a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d11b      	bne.n	800202a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d113      	bne.n	800202a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	3b01      	subs	r3, #1
 8002010:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d109      	bne.n	800202a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	3b01      	subs	r3, #1
 8002024:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	019f800c 	.word	0x019f800c
 8002040:	feeefffc 	.word	0xfeeefffc

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e11e      	b.n	800229a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b91      	ldr	r3, [pc, #580]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d910      	bls.n	800208c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b8e      	ldr	r3, [pc, #568]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 020f 	bic.w	r2, r3, #15
 8002072:	498c      	ldr	r1, [pc, #560]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e106      	b.n	800229a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d073      	beq.n	8002180 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d129      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a0:	4b81      	ldr	r3, [pc, #516]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0f4      	b.n	800229a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020b0:	f000 f972 	bl	8002398 <RCC_GetSysClockFreqFromPLLSource>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4a7c      	ldr	r2, [pc, #496]	; (80022ac <HAL_RCC_ClockConfig+0x268>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d93f      	bls.n	800213e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020be:	4b7a      	ldr	r3, [pc, #488]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d033      	beq.n	800213e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d12f      	bne.n	800213e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020de:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e6:	4a70      	ldr	r2, [pc, #448]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80020e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e024      	b.n	800213e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d107      	bne.n	800210c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0c6      	b.n	800229a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210c:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0be      	b.n	800229a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800211c:	f000 f8ce 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8002120:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4a61      	ldr	r2, [pc, #388]	; (80022ac <HAL_RCC_ClockConfig+0x268>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d909      	bls.n	800213e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800212a:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002132:	4a5d      	ldr	r2, [pc, #372]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 8002134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002138:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b5a      	ldr	r3, [pc, #360]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4957      	ldr	r1, [pc, #348]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002150:	f7fe fb4c 	bl	80007ec <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe fb48 	bl	80007ec <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e095      	b.n	800229a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a42      	ldr	r2, [pc, #264]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 800219e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021b0:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021b8:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80021ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4936      	ldr	r1, [pc, #216]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4a32      	ldr	r2, [pc, #200]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 80021e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d21d      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 020f 	bic.w	r2, r3, #15
 80021fc:	4929      	ldr	r1, [pc, #164]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	4313      	orrs	r3, r2
 8002202:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002204:	f7fe faf2 	bl	80007ec <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7fe faee 	bl	80007ec <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e03b      	b.n	800229a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_ClockConfig+0x260>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d1ed      	bne.n	800220c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4917      	ldr	r1, [pc, #92]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	490f      	ldr	r1, [pc, #60]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800226e:	f000 f825 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8002272:	4602      	mov	r2, r0
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCC_ClockConfig+0x264>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	490c      	ldr	r1, [pc, #48]	; (80022b0 <HAL_RCC_ClockConfig+0x26c>)
 8002280:	5ccb      	ldrb	r3, [r1, r3]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x270>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x274>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fa5e 	bl	8000754 <HAL_InitTick>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	04c4b400 	.word	0x04c4b400
 80022b0:	08002c2c 	.word	0x08002c2c
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022c2:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	e047      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d102      	bne.n	80022e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022e0:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	e03e      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d136      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3301      	adds	r3, #1
 8002308:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d10c      	bne.n	800232a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002310:	4a1a      	ldr	r2, [pc, #104]	; (800237c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb8>)
 800231a:	68d2      	ldr	r2, [r2, #12]
 800231c:	0a12      	lsrs	r2, r2, #8
 800231e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	617b      	str	r3, [r7, #20]
      break;
 8002328:	e00c      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800232a:	4a13      	ldr	r2, [pc, #76]	; (8002378 <HAL_RCC_GetSysClockFreq+0xbc>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002334:	68d2      	ldr	r2, [r2, #12]
 8002336:	0a12      	lsrs	r2, r2, #8
 8002338:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800233c:	fb02 f303 	mul.w	r3, r2, r3
 8002340:	617b      	str	r3, [r7, #20]
      break;
 8002342:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0e5b      	lsrs	r3, r3, #25
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	3301      	adds	r3, #1
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	fbb2 f3f3 	udiv	r3, r2, r3
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e001      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002364:	693b      	ldr	r3, [r7, #16]
}
 8002366:	4618      	mov	r0, r3
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	00f42400 	.word	0x00f42400
 800237c:	007a1200 	.word	0x007a1200

08002380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_RCC_GetHCLKFreq+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000000 	.word	0x20000000

08002398 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3301      	adds	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d10c      	bne.n	80023d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023bc:	4a17      	ldr	r2, [pc, #92]	; (800241c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023c6:	68d2      	ldr	r2, [r2, #12]
 80023c8:	0a12      	lsrs	r2, r2, #8
 80023ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	617b      	str	r3, [r7, #20]
    break;
 80023d4:	e00c      	b.n	80023f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023d6:	4a12      	ldr	r2, [pc, #72]	; (8002420 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023e0:	68d2      	ldr	r2, [r2, #12]
 80023e2:	0a12      	lsrs	r2, r2, #8
 80023e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	617b      	str	r3, [r7, #20]
    break;
 80023ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0e5b      	lsrs	r3, r3, #25
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	3301      	adds	r3, #1
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800240a:	687b      	ldr	r3, [r7, #4]
}
 800240c:	4618      	mov	r0, r3
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40021000 	.word	0x40021000
 800241c:	007a1200 	.word	0x007a1200
 8002420:	00f42400 	.word	0x00f42400

08002424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e049      	b.n	80024ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe f8dc 	bl	8000608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f000 f9c4 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d001      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e054      	b.n	8002596 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d022      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x80>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d01d      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x80>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d018      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x80>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a21      	ldr	r2, [pc, #132]	; (80025ac <HAL_TIM_Base_Start_IT+0xd8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x80>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00e      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x80>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x80>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_TIM_Base_Start_IT+0x80>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <HAL_TIM_Base_Start_IT+0xe8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d115      	bne.n	8002580 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_TIM_Base_Start_IT+0xec>)
 800255c:	4013      	ands	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b06      	cmp	r3, #6
 8002564:	d015      	beq.n	8002592 <HAL_TIM_Base_Start_IT+0xbe>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256c:	d011      	beq.n	8002592 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257e:	e008      	b.n	8002592 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e000      	b.n	8002594 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002592:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	40000400 	.word	0x40000400
 80025ac:	40000800 	.word	0x40000800
 80025b0:	40000c00 	.word	0x40000c00
 80025b4:	40013400 	.word	0x40013400
 80025b8:	40014000 	.word	0x40014000
 80025bc:	40015000 	.word	0x40015000
 80025c0:	00010007 	.word	0x00010007

080025c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_TIM_ConfigClockSource+0x1c>
 80025dc:	2302      	movs	r3, #2
 80025de:	e0f6      	b.n	80027ce <HAL_TIM_ConfigClockSource+0x20a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80025fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800260a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a6f      	ldr	r2, [pc, #444]	; (80027d8 <HAL_TIM_ConfigClockSource+0x214>)
 800261a:	4293      	cmp	r3, r2
 800261c:	f000 80c1 	beq.w	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 8002620:	4a6d      	ldr	r2, [pc, #436]	; (80027d8 <HAL_TIM_ConfigClockSource+0x214>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f200 80c6 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002628:	4a6c      	ldr	r2, [pc, #432]	; (80027dc <HAL_TIM_ConfigClockSource+0x218>)
 800262a:	4293      	cmp	r3, r2
 800262c:	f000 80b9 	beq.w	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 8002630:	4a6a      	ldr	r2, [pc, #424]	; (80027dc <HAL_TIM_ConfigClockSource+0x218>)
 8002632:	4293      	cmp	r3, r2
 8002634:	f200 80be 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <HAL_TIM_ConfigClockSource+0x21c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f000 80b1 	beq.w	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 8002640:	4a67      	ldr	r2, [pc, #412]	; (80027e0 <HAL_TIM_ConfigClockSource+0x21c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	f200 80b6 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002648:	4a66      	ldr	r2, [pc, #408]	; (80027e4 <HAL_TIM_ConfigClockSource+0x220>)
 800264a:	4293      	cmp	r3, r2
 800264c:	f000 80a9 	beq.w	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 8002650:	4a64      	ldr	r2, [pc, #400]	; (80027e4 <HAL_TIM_ConfigClockSource+0x220>)
 8002652:	4293      	cmp	r3, r2
 8002654:	f200 80ae 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002658:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <HAL_TIM_ConfigClockSource+0x224>)
 800265a:	4293      	cmp	r3, r2
 800265c:	f000 80a1 	beq.w	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 8002660:	4a61      	ldr	r2, [pc, #388]	; (80027e8 <HAL_TIM_ConfigClockSource+0x224>)
 8002662:	4293      	cmp	r3, r2
 8002664:	f200 80a6 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002668:	4a60      	ldr	r2, [pc, #384]	; (80027ec <HAL_TIM_ConfigClockSource+0x228>)
 800266a:	4293      	cmp	r3, r2
 800266c:	f000 8099 	beq.w	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 8002670:	4a5e      	ldr	r2, [pc, #376]	; (80027ec <HAL_TIM_ConfigClockSource+0x228>)
 8002672:	4293      	cmp	r3, r2
 8002674:	f200 809e 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002678:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800267c:	f000 8091 	beq.w	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 8002680:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002684:	f200 8096 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800268c:	f000 8089 	beq.w	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 8002690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002694:	f200 808e 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269c:	d03e      	beq.n	800271c <HAL_TIM_ConfigClockSource+0x158>
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a2:	f200 8087 	bhi.w	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	f000 8086 	beq.w	80027ba <HAL_TIM_ConfigClockSource+0x1f6>
 80026ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b2:	d87f      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d01a      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x12a>
 80026b8:	2b70      	cmp	r3, #112	; 0x70
 80026ba:	d87b      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80026bc:	2b60      	cmp	r3, #96	; 0x60
 80026be:	d050      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x19e>
 80026c0:	2b60      	cmp	r3, #96	; 0x60
 80026c2:	d877      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80026c4:	2b50      	cmp	r3, #80	; 0x50
 80026c6:	d03c      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x17e>
 80026c8:	2b50      	cmp	r3, #80	; 0x50
 80026ca:	d873      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d058      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0x1be>
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d86f      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80026d4:	2b30      	cmp	r3, #48	; 0x30
 80026d6:	d064      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 80026d8:	2b30      	cmp	r3, #48	; 0x30
 80026da:	d86b      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d060      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d867      	bhi.n	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d05c      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d05a      	beq.n	80027a2 <HAL_TIM_ConfigClockSource+0x1de>
 80026ec:	e062      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	f000 f9a7 	bl	8002a50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002710:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	609a      	str	r2, [r3, #8]
      break;
 800271a:	e04f      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800272c:	f000 f990 	bl	8002a50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800273e:	609a      	str	r2, [r3, #8]
      break;
 8002740:	e03c      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	461a      	mov	r2, r3
 8002750:	f000 f902 	bl	8002958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2150      	movs	r1, #80	; 0x50
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f95b 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 8002760:	e02c      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800276e:	461a      	mov	r2, r3
 8002770:	f000 f921 	bl	80029b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2160      	movs	r1, #96	; 0x60
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f94b 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 8002780:	e01c      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800278e:	461a      	mov	r2, r3
 8002790:	f000 f8e2 	bl	8002958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2140      	movs	r1, #64	; 0x40
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f93b 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 80027a0:	e00c      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	4610      	mov	r0, r2
 80027ae:	f000 f932 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 80027b2:	e003      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      break;
 80027b8:	e000      	b.n	80027bc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80027ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	00100070 	.word	0x00100070
 80027dc:	00100060 	.word	0x00100060
 80027e0:	00100050 	.word	0x00100050
 80027e4:	00100040 	.word	0x00100040
 80027e8:	00100030 	.word	0x00100030
 80027ec:	00100020 	.word	0x00100020

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <TIM_Base_SetConfig+0x144>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d017      	beq.n	8002838 <TIM_Base_SetConfig+0x48>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d013      	beq.n	8002838 <TIM_Base_SetConfig+0x48>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a49      	ldr	r2, [pc, #292]	; (8002938 <TIM_Base_SetConfig+0x148>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00f      	beq.n	8002838 <TIM_Base_SetConfig+0x48>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a48      	ldr	r2, [pc, #288]	; (800293c <TIM_Base_SetConfig+0x14c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00b      	beq.n	8002838 <TIM_Base_SetConfig+0x48>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a47      	ldr	r2, [pc, #284]	; (8002940 <TIM_Base_SetConfig+0x150>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d007      	beq.n	8002838 <TIM_Base_SetConfig+0x48>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a46      	ldr	r2, [pc, #280]	; (8002944 <TIM_Base_SetConfig+0x154>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_Base_SetConfig+0x48>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a45      	ldr	r2, [pc, #276]	; (8002948 <TIM_Base_SetConfig+0x158>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d108      	bne.n	800284a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a39      	ldr	r2, [pc, #228]	; (8002934 <TIM_Base_SetConfig+0x144>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d023      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d01f      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a36      	ldr	r2, [pc, #216]	; (8002938 <TIM_Base_SetConfig+0x148>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01b      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a35      	ldr	r2, [pc, #212]	; (800293c <TIM_Base_SetConfig+0x14c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d017      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a34      	ldr	r2, [pc, #208]	; (8002940 <TIM_Base_SetConfig+0x150>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a33      	ldr	r2, [pc, #204]	; (8002944 <TIM_Base_SetConfig+0x154>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00f      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a33      	ldr	r2, [pc, #204]	; (800294c <TIM_Base_SetConfig+0x15c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00b      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a32      	ldr	r2, [pc, #200]	; (8002950 <TIM_Base_SetConfig+0x160>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a31      	ldr	r2, [pc, #196]	; (8002954 <TIM_Base_SetConfig+0x164>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0xaa>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a2c      	ldr	r2, [pc, #176]	; (8002948 <TIM_Base_SetConfig+0x158>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a18      	ldr	r2, [pc, #96]	; (8002934 <TIM_Base_SetConfig+0x144>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d013      	beq.n	8002900 <TIM_Base_SetConfig+0x110>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <TIM_Base_SetConfig+0x154>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00f      	beq.n	8002900 <TIM_Base_SetConfig+0x110>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	; (800294c <TIM_Base_SetConfig+0x15c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00b      	beq.n	8002900 <TIM_Base_SetConfig+0x110>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a19      	ldr	r2, [pc, #100]	; (8002950 <TIM_Base_SetConfig+0x160>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <TIM_Base_SetConfig+0x110>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a18      	ldr	r2, [pc, #96]	; (8002954 <TIM_Base_SetConfig+0x164>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <TIM_Base_SetConfig+0x110>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <TIM_Base_SetConfig+0x158>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d103      	bne.n	8002908 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f023 0201 	bic.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]
  }
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800
 8002940:	40000c00 	.word	0x40000c00
 8002944:	40013400 	.word	0x40013400
 8002948:	40015000 	.word	0x40015000
 800294c:	40014000 	.word	0x40014000
 8002950:	40014400 	.word	0x40014400
 8002954:	40014800 	.word	0x40014800

08002958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 030a 	bic.w	r3, r3, #10
 8002994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b087      	sub	sp, #28
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f023 0210 	bic.w	r2, r3, #16
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	031b      	lsls	r3, r3, #12
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	621a      	str	r2, [r3, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f043 0307 	orr.w	r3, r3, #7
 8002a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	021a      	lsls	r2, r3, #8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e074      	b.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a34      	ldr	r2, [pc, #208]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d009      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a33      	ldr	r2, [pc, #204]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a31      	ldr	r2, [pc, #196]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002aec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b28:	d01d      	beq.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d018      	beq.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00e      	beq.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d10c      	bne.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40013400 	.word	0x40013400
 8002ba8:	40015000 	.word	0x40015000
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40000800 	.word	0x40000800
 8002bb4:	40000c00 	.word	0x40000c00
 8002bb8:	40014000 	.word	0x40014000

08002bbc <memset>:
 8002bbc:	4402      	add	r2, r0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <memset+0xa>
 8002bc4:	4770      	bx	lr
 8002bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bca:	e7f9      	b.n	8002bc0 <memset+0x4>

08002bcc <__libc_init_array>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	4d0d      	ldr	r5, [pc, #52]	; (8002c04 <__libc_init_array+0x38>)
 8002bd0:	4c0d      	ldr	r4, [pc, #52]	; (8002c08 <__libc_init_array+0x3c>)
 8002bd2:	1b64      	subs	r4, r4, r5
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	2600      	movs	r6, #0
 8002bd8:	42a6      	cmp	r6, r4
 8002bda:	d109      	bne.n	8002bf0 <__libc_init_array+0x24>
 8002bdc:	4d0b      	ldr	r5, [pc, #44]	; (8002c0c <__libc_init_array+0x40>)
 8002bde:	4c0c      	ldr	r4, [pc, #48]	; (8002c10 <__libc_init_array+0x44>)
 8002be0:	f000 f818 	bl	8002c14 <_init>
 8002be4:	1b64      	subs	r4, r4, r5
 8002be6:	10a4      	asrs	r4, r4, #2
 8002be8:	2600      	movs	r6, #0
 8002bea:	42a6      	cmp	r6, r4
 8002bec:	d105      	bne.n	8002bfa <__libc_init_array+0x2e>
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
 8002bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf4:	4798      	blx	r3
 8002bf6:	3601      	adds	r6, #1
 8002bf8:	e7ee      	b.n	8002bd8 <__libc_init_array+0xc>
 8002bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfe:	4798      	blx	r3
 8002c00:	3601      	adds	r6, #1
 8002c02:	e7f2      	b.n	8002bea <__libc_init_array+0x1e>
 8002c04:	08002c3c 	.word	0x08002c3c
 8002c08:	08002c3c 	.word	0x08002c3c
 8002c0c:	08002c3c 	.word	0x08002c3c
 8002c10:	08002c40 	.word	0x08002c40

08002c14 <_init>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr

08002c20 <_fini>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr
